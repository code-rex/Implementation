#include<iostream>
#include<vector>
#include<queue>
using namespace std;
void BFSutil(int s,vector<bool>&visited,vector<int>adj[])
{
    visited[s]=true;
    queue<int>q;
    q.push(s);
    while(!q.empty())
    {
        s=q.front();
        cout<<s<<" ";
        q.pop();
        for(int i=0;i!=adj[s].size();i++)
        {
            if(!visited[adj[s][i]])
            {
                visited[adj[s][i]]=true;
                q.push(adj[s][i]);
            }
        }
    }
}
void BFS(vector<int>adj[],int vertex)
{
    vector<bool>visited(vertex+1,false);
    for(int i=0;i<vertex;i++)
    {
        if(!visited[i])
            BFSutil(i,visited,adj);
    }
}
int main()
{
    int vertex;
    cin>>vertex;
    vector<int>adj[vertex];
    int edge;
    cin>>edge;
    while(edge--)
    {
        int a,b;
        cin>>a>>b;
        adj[a].push_back(b);
    }
    BFS(adj,vertex);
    return 0;
}
